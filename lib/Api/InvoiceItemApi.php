<?php
/**
 * InvoiceItemApi
 * PHP version 5
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.20.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Killbill\Client\Swagger\ApiException;
use Killbill\Client\Swagger\Configuration;
use Killbill\Client\Swagger\HeaderSelector;
use Killbill\Client\Swagger\ObjectSerializer;

/**
 * InvoiceItemApi Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceItemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInvoiceItemCustomFields
     *
     * Add custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param  string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $xKillbillReason xKillbillReason (optional)
     * @param  string $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function createInvoiceItemCustomFields($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createInvoiceItemCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createInvoiceItemCustomFieldsWithHttpInfo
     *
     * Add custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoiceItemCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInvoiceItemCustomFieldsAsync
     *
     * Add custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceItemCustomFieldsAsync($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createInvoiceItemCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoiceItemCustomFieldsAsyncWithHttpInfo
     *
     * Add custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceItemCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoiceItemCustomFields'
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInvoiceItemCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createInvoiceItemCustomFields'
            );
        }
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling createInvoiceItemCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInvoiceItemTags
     *
     * Add tags to invoice item
     *
     * @param  string[] $body body (required)
     * @param  string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $xKillbillReason xKillbillReason (optional)
     * @param  string $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function createInvoiceItemTags($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createInvoiceItemTagsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createInvoiceItemTagsWithHttpInfo
     *
     * Add tags to invoice item
     *
     * @param  string[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoiceItemTagsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createInvoiceItemTagsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInvoiceItemTagsAsync
     *
     * Add tags to invoice item
     *
     * @param  string[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceItemTagsAsync($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createInvoiceItemTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoiceItemTagsAsyncWithHttpInfo
     *
     * Add tags to invoice item
     *
     * @param  string[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceItemTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createInvoiceItemTagsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoiceItemTags'
     *
     * @param  string[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInvoiceItemTagsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInvoiceItemTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createInvoiceItemTags'
            );
        }
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling createInvoiceItemTags'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInvoiceItemCustomFields
     *
     * Remove custom fields from invoice item
     *
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param  string[] $customField customField (optional)
     * @param  string $xKillbillReason xKillbillReason (optional)
     * @param  string $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInvoiceItemCustomFields($invoiceItemId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteInvoiceItemCustomFieldsWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteInvoiceItemCustomFieldsWithHttpInfo
     *
     * Remove custom fields from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $customField (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvoiceItemCustomFieldsWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->deleteInvoiceItemCustomFieldsRequest($invoiceItemId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInvoiceItemCustomFieldsAsync
     *
     * Remove custom fields from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $customField (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceItemCustomFieldsAsync($invoiceItemId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteInvoiceItemCustomFieldsAsyncWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInvoiceItemCustomFieldsAsyncWithHttpInfo
     *
     * Remove custom fields from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $customField (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceItemCustomFieldsAsyncWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->deleteInvoiceItemCustomFieldsRequest($invoiceItemId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInvoiceItemCustomFields'
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $customField (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInvoiceItemCustomFieldsRequest($invoiceItemId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling deleteInvoiceItemCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteInvoiceItemCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($customField)) {
            $customField = ObjectSerializer::serializeCollection($customField, 'csv');
        }
        if ($customField !== null) {
            $queryParams['customField'] = ObjectSerializer::toQueryValue($customField);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInvoiceItemTags
     *
     * Remove tags from invoice item
     *
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param  string[] $tagDef tagDef (optional)
     * @param  string $xKillbillReason xKillbillReason (optional)
     * @param  string $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInvoiceItemTags($invoiceItemId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteInvoiceItemTagsWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteInvoiceItemTagsWithHttpInfo
     *
     * Remove tags from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $tagDef (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvoiceItemTagsWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->deleteInvoiceItemTagsRequest($invoiceItemId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInvoiceItemTagsAsync
     *
     * Remove tags from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $tagDef (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceItemTagsAsync($invoiceItemId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteInvoiceItemTagsAsyncWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInvoiceItemTagsAsyncWithHttpInfo
     *
     * Remove tags from invoice item
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $tagDef (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceItemTagsAsyncWithHttpInfo($invoiceItemId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->deleteInvoiceItemTagsRequest($invoiceItemId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInvoiceItemTags'
     *
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string[] $tagDef (optional)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInvoiceItemTagsRequest($invoiceItemId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling deleteInvoiceItemTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteInvoiceItemTags'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($tagDef)) {
            $tagDef = ObjectSerializer::serializeCollection($tagDef, 'csv');
        }
        if ($tagDef !== null) {
            $queryParams['tagDef'] = ObjectSerializer::toQueryValue($tagDef);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceItemCustomFields
     *
     * Retrieve invoice item custom fields
     *
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $audit audit (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getInvoiceItemCustomFields($invoiceItemId, $audit = null)
    {
        list($response) = $this->getInvoiceItemCustomFieldsWithHttpInfo($invoiceItemId, $audit);
        return $response;
    }

    /**
     * Operation getInvoiceItemCustomFieldsWithHttpInfo
     *
     * Retrieve invoice item custom fields
     *
     * @param  string $invoiceItemId (required)
     * @param  string $audit (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceItemCustomFieldsWithHttpInfo($invoiceItemId, $audit = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getInvoiceItemCustomFieldsRequest($invoiceItemId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceItemCustomFieldsAsync
     *
     * Retrieve invoice item custom fields
     *
     * @param  string $invoiceItemId (required)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemCustomFieldsAsync($invoiceItemId, $audit = null)
    {
        return $this->getInvoiceItemCustomFieldsAsyncWithHttpInfo($invoiceItemId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceItemCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve invoice item custom fields
     *
     * @param  string $invoiceItemId (required)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemCustomFieldsAsyncWithHttpInfo($invoiceItemId, $audit = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getInvoiceItemCustomFieldsRequest($invoiceItemId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceItemCustomFields'
     *
     * @param  string $invoiceItemId (required)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceItemCustomFieldsRequest($invoiceItemId, $audit = null)
    {
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling getInvoiceItemCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceItemTags
     *
     * Retrieve invoice item tags
     *
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $accountId accountId (required)
     * @param  bool $includedDeleted includedDeleted (optional)
     * @param  string $audit audit (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function getInvoiceItemTags($invoiceItemId, $accountId, $includedDeleted = null, $audit = null)
    {
        list($response) = $this->getInvoiceItemTagsWithHttpInfo($invoiceItemId, $accountId, $includedDeleted, $audit);
        return $response;
    }

    /**
     * Operation getInvoiceItemTagsWithHttpInfo
     *
     * Retrieve invoice item tags
     *
     * @param  string $invoiceItemId (required)
     * @param  string $accountId (required)
     * @param  bool $includedDeleted (optional)
     * @param  string $audit (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceItemTagsWithHttpInfo($invoiceItemId, $accountId, $includedDeleted = null, $audit = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getInvoiceItemTagsRequest($invoiceItemId, $accountId, $includedDeleted, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceItemTagsAsync
     *
     * Retrieve invoice item tags
     *
     * @param  string $invoiceItemId (required)
     * @param  string $accountId (required)
     * @param  bool $includedDeleted (optional)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemTagsAsync($invoiceItemId, $accountId, $includedDeleted = null, $audit = null)
    {
        return $this->getInvoiceItemTagsAsyncWithHttpInfo($invoiceItemId, $accountId, $includedDeleted, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceItemTagsAsyncWithHttpInfo
     *
     * Retrieve invoice item tags
     *
     * @param  string $invoiceItemId (required)
     * @param  string $accountId (required)
     * @param  bool $includedDeleted (optional)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemTagsAsyncWithHttpInfo($invoiceItemId, $accountId, $includedDeleted = null, $audit = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getInvoiceItemTagsRequest($invoiceItemId, $accountId, $includedDeleted, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceItemTags'
     *
     * @param  string $invoiceItemId (required)
     * @param  string $accountId (required)
     * @param  bool $includedDeleted (optional)
     * @param  string $audit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceItemTagsRequest($invoiceItemId, $accountId, $includedDeleted = null, $audit = null)
    {
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling getInvoiceItemTags'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInvoiceItemTags'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountId !== null) {
            $queryParams['accountId'] = ObjectSerializer::toQueryValue($accountId);
        }
        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyInvoiceItemCustomFields
     *
     * Modify custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param  string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param  string $invoiceItemId invoiceItemId (required)
     * @param  string $xKillbillReason xKillbillReason (optional)
     * @param  string $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyInvoiceItemCustomFields($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->modifyInvoiceItemCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation modifyInvoiceItemCustomFieldsWithHttpInfo
     *
     * Modify custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyInvoiceItemCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->modifyInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation modifyInvoiceItemCustomFieldsAsync
     *
     * Modify custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyInvoiceItemCustomFieldsAsync($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->modifyInvoiceItemCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyInvoiceItemCustomFieldsAsyncWithHttpInfo
     *
     * Modify custom fields to invoice item
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyInvoiceItemCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '';
        $request = $this->modifyInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyInvoiceItemCustomFields'
     *
     * @param  \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param  string $xKillbillCreatedBy (required)
     * @param  string $invoiceItemId (required)
     * @param  string $xKillbillReason (optional)
     * @param  string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyInvoiceItemCustomFieldsRequest($body, $xKillbillCreatedBy, $invoiceItemId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyInvoiceItemCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling modifyInvoiceItemCustomFields'
            );
        }
        // verify the required parameter 'invoiceItemId' is set
        if ($invoiceItemId === null || (is_array($invoiceItemId) && count($invoiceItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceItemId when calling modifyInvoiceItemCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/invoiceItems/{invoiceItemId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($invoiceItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceItemId' . '}',
                ObjectSerializer::toPathValue($invoiceItemId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = GuzzleHttpjson_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
